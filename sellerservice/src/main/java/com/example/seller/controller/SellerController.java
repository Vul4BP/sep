package com.example.seller.controller;

import com.example.seller.models.Magazine;
import com.example.seller.models.Payment;
import com.example.seller.repo.MagazineRepository;
import com.example.seller.repo.PaymentRepository;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


@RestController
public class SellerController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MagazineRepository magazineRepository;

    @Autowired
    private PaymentRepository paymentRepository;

    @Value("${app.id}")
    String  instance;

    @RequestMapping(value="getjson",method = RequestMethod.GET)
    public  String getJSON()
    {
        return "JSON from sellers service. Hello from instance = " + instance;
    }

    @PostMapping("paymentmethod")
    public String checkPaymentMethod(@RequestBody String paymentMethod){
        JsonObject jsonObject = new JsonParser().parse(paymentMethod).getAsJsonObject();
        String json = "{ \"result\": " + jsonObject.get("payment").toString() + " }";
        return  json;
    }

    @RequestMapping(path="/addmagazine")
    public @ResponseBody String addNewMagazine (@RequestParam String name, @RequestParam Double price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Magazine m = new Magazine();
        m.setPrice(price);
        m.setName(name);
        magazineRepository.save(m);
        return "Saved";
    }

    @RequestMapping(path="/addmagazinepayment")
    public @ResponseBody String addNewMagazinePayment(@RequestParam String magid, @RequestParam String payid){
        Optional<Magazine> m = magazineRepository.findById(magid);
        Optional<Payment> p = paymentRepository.findById(payid);

        m.get().getPayments().add(p.get());
        magazineRepository.save(m.get());

        return "saved";
    }

    @RequestMapping(path="/addpayment")
    public @ResponseBody String addNewPayment (@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Payment p = new Payment();
        p.setName(name);
        paymentRepository.save(p);
        return "Saved";
    }

    @GetMapping(path="/allmagazines")
    public @ResponseBody Iterable<Magazine> getAllMagazines() {
        // This returns a JSON or XML with the users
        return magazineRepository.findAll();
    }

    @GetMapping(path="/allpayments")
    public @ResponseBody Iterable<Payment> getAllPayments() {
        // This returns a JSON or XML with the users
        return paymentRepository.findAll();
    }

    @GetMapping(path="/getpayments")
    public @ResponseBody Iterable<Payment> getMagazinePayments(@RequestParam String magid) {
        // This returns a JSON or XML with the users
        Optional<Magazine> m = magazineRepository.findById(magid);
        return m.get().getPayments();
    }

}
